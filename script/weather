#!/usr/bin/env perl

use utf8;
use strict;
use warnings;
use LWP::UserAgent;
use Encode;
use JSON;

my $current_region = parser_region();
my $woeid = woeid_process($current_region);
my @weekly = condition_process($woeid);
my @weathers;
        
push @weathers, ("[-Weekly Weather-【$current_region】]");
push @weathers, ("[$weekly[0]"." $weekly[1]]  "." $weekly[2]℃ ｜$weekly[3]℃ "."【$weekly[4]】");
push @weathers, ("[$weekly[5]"." $weekly[6]]  "." $weekly[7]℃ ｜$weekly[8]℃ "."【$weekly[9]】");
push @weathers, ("[$weekly[10]"." $weekly[11]]  "." $weekly[12]℃ ｜$weekly[13]℃ "."【$weekly[14]】");
push @weathers, ("[$weekly[15]"." $weekly[16]]  "." $weekly[17]℃ ｜$weekly[18]℃ "."【$weekly[19]】");
push @weathers, ("[$weekly[20]"." $weekly[21]]  "." $weekly[22]℃ ｜$weekly[23]℃ "."【$weekly[24]】");

my $parse_weather = join('/', @weathers);
system("echo $parse_weather > /tmp/info_pipe");

sub current_process {
    my $msg = shift;
    my $user_country = $msg->match->[0];

    my $woeid = woeid_process($msg, $user_country);

    if ( $woeid =~ /^\d+/) {
        my %current = condition_process($woeid, 'current');
        $msg->send("$current{location}"."[ LastTime:$current{date} ]");
        $msg->send("The status of current weather-[$current{condition}]"." temp-[$current{temp}℃ ]"." humidity-[$current{humidty}%]" .
               " direction- [$current{direction}km]"." speed-[$current{speed}km/h]"." sunrise/sunset-[$current{sunrise}/$current{sunset}]");
    }
    else {
        $msg->send($woeid);
    }
}

sub condition_process {
    my $woeid_param = shift; 
    my $ua = LWP::UserAgent->new;
    my @weekly;

    my $y_rep = $ua->get("http://weather.yahooapis.com/forecastrss?w=$woeid_param&u=c");
    
    if ($y_rep->is_success) {
        my $html = $y_rep->decoded_content;

        @weekly =  $html =~ m{<yweather:forecast day="(.*?)" date="(.*?)" low="(.*?)" high="(.*?)" text="(.*?)" code="\d+" />}gsm; 
        return @weekly;
    }
    else {
        die $y_rep->status_line;
    }
}

sub woeid_process {
    my $param = shift;
    my $error_msg = 'The name of the country or the city name wrong.';
    my $ua = LWP::UserAgent->new;
    my $rep = $ua->get("http://woeid.rosselliot.co.nz/lookup/$param");
    
    if ($rep->is_success) {
         my @woeid = $rep->decoded_content =~ m{data-woeid="(\d+)"}gsm;
         my @countrys = $rep->decoded_content =~ m{data-woeid="\d+"><td>.*?</td><td>.*?</td><td>(.*?)</td>}gsm;

         if ( $countrys[0] || $countrys[1]) {
            return "$woeid[0]";
         }
         elsif (!@woeid ) {
            return "$error_msg";
         }
         else {
             return $woeid[0];
         }
    }
    else {
        die $rep->status_line;
    }
}

sub station {
    my $msg = shift;
    my $user_ip = $msg->match->[0];

    $msg->http("http://www.ip2location.com/$user_ip")->get (
        sub {
            my ($body, $hdr) = @_;

            return if ( !$body || $hdr->{Status} !~ /^2/ );

            my $decoded_body = decode("utf8", $body);
                if ( $decoded_body =~ m{<td><b>Weather Station</b></td>.*?<td>(.*?)</td>}gsm ) {
                    #print $1;
                }
            }
        );
}

sub parser_region {
    my $ua = LWP::UserAgent->new;
    my $rep = $ua->get("http://www.geobytes.com/IpLocator.htm?GetLocation&template=json.txt");

    if ( $rep->is_success ) {
        my $json = $rep->decoded_content;
        if ( $json =~ /"region":"(.*?)"/ ) {
            my $region = $1;
        }
    }
}
